@page "/MedicalVisit/List/{ID:int}"
@page "/MedicalVisit/List"

@inject IMedicalVisitData MedicalVisitData
@inject IDoctorData DoctorData
@inject NavigationManager navigationManager

<h3>Enter a MedicalVisit You Read</h3>
<EditForm Model="@MedicalVisit">

    <div class="form-group">
        <label class="control-label">Doctor</label>
        <select @bind="MedicalVisit.Doctor" class="form-control selectpicker">
            <option>--select--</option>
            @if (DoctorList != null)
            {
                @foreach (var doctor in DoctorList)
                {
                    <option>@doctor.Name</option>
                }
            }
        </select>
    </div>
    <div class="form-group">
        <label class="control-label">Notes</label>
        <textarea @bind="MedicalVisit.Notes" rows="3" class="form-control" />
    </div>
    <div class="form-group">
        <label class="control-label">Type</label>
        <select @bind="MedicalVisit.Type" class="form-control selectpicker">
            <option>--select--</option>
            <option>Telehealth</option>
            <option>Meds Consultation</option>
            <option>Therapy</option>
            <option>Eye Exam</option>
            <option>Weight Management</option>
            <option>Physical</option>
            <option>Teeth Cleaning</option>
            <option>Cavity Fill</option>
            <option>Root Canal</option>
        </select>
    </div>
    <div class="form-group">
        <input type="submit" value="Create Medical Visit" class="btn btn-primary" @onclick="(() => CreateMedicalVisit())" />
        <input type="submit" value="Delete" class="btn btn-danger" @onclick="(() => DeleteRecord(MedicalVisit.ID))" />
    </div>
</EditForm>

@if (MedicalVisitList is null)
{
    <h4>Records Loading...</h4>
}
else
{
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>ID</th>
                <th>Date</th>
                <th>Doctor</th>
                <th>Type</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var MedicalVisit in MedicalVisitList)
            {
                <tr>
                    <td>
                            <button class="btn" @onclick="(() => ReadMedicalVisit(MedicalVisit.ID))">
                                @MedicalVisit.ID
                            </button>
                        </td>
                    <td>@MedicalVisit.Date</td>
                    <td>@MedicalVisit.Doctor</td>
                    <td>@MedicalVisit.Type</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int ID { get; set; }
    private List<MedicalVisitModel> MedicalVisitList;
    private MedicalVisitModel MedicalVisit = new MedicalVisitModel();
    public List<DoctorModel> DoctorList;

    protected override async Task OnInitializedAsync()
    {
        MedicalVisitList = await MedicalVisitData.GetMedicalVisits();
        DoctorList = await DoctorData.GetDoctors();
    }

    private async void CreateMedicalVisit()
    {
        MedicalVisit.Date = DateTime.Now;
        MedicalVisit.PersonID = 1;// fill in later
        if (MedicalVisit.ID == 0)
        {
            int id = await MedicalVisitData.CreateMedicalVisit(MedicalVisit);
        }
        else
        {
            int id = await MedicalVisitData.UpdateMedicalVisit(MedicalVisit);
        }
        Refresh();
        // MedicalVisit = new MedicalVisitModel();
        //MedicalVisitList = await MedicalVisitData.GetMedicalVisits();
    }
    private async Task ReadMedicalVisit(int ID)
    {
        MedicalVisit = await MedicalVisitData.GetMedicalVisitById(ID);
    }
    private void DeleteRecord(int ID)
    {
        if (ID != 0)
        {
            MedicalVisitData.DeleteMedicalVisit(ID);
            Refresh();
        }
    }
    private async void Refresh()
    {
        MedicalVisitList = await MedicalVisitData.GetMedicalVisits();
        DoctorList = await DoctorData.GetDoctors();
        MedicalVisit =new MedicalVisitModel();
        this.StateHasChanged();
    }
}

